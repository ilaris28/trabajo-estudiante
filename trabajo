#include <iostream> 
#include <string>
#include <algorithm>

struct Estudiante {
    std::string nombre;
    int codigo;
    float nota;
    Estudiante* siguiente; // Corrección de 'siguente' a 'siguiente'
};

Estudiante* crearEstudiante(const std::string& nombre, int codigo, float nota) {
    Estudiante* nuevoEstudiante = new Estudiante;
    nuevoEstudiante->nombre = nombre;
    nuevoEstudiante->codigo = codigo;
    nuevoEstudiante->nota = nota;
    nuevoEstudiante->siguiente = nullptr; // Inicializa siguiente como nullptr
    return nuevoEstudiante;
}

void insertarEstudiante(Estudiante*& pac, Estudiante* nuevoEstudiante) {
    nuevoEstudiante->siguiente = pac; // Inserta al principio de la lista
    pac = nuevoEstudiante;
}

void ordenarPorNota(Estudiante* pac) {
    if (pac == nullptr) return;

    bool intercambiado;
    do {
        Estudiante* actual = pac;
        intercambiado = false;

        while (actual->siguiente != nullptr) {
            if (actual->nota < actual->siguiente->nota) {
                std::swap(actual->nombre, actual->siguiente->nombre);
                std::swap(actual->codigo, actual->siguiente->codigo);
                std::swap(actual->nota, actual->siguiente->nota);
                intercambiado = true; // Marca que hubo un intercambio
            }
            actual = actual->siguiente; // Mueve al siguiente estudiante
        }
    } while (intercambiado); // Repite hasta que no haya más intercambios
}

void imprimirLista(Estudiante* pac) {
    Estudiante* actual = pac;
    while (actual != nullptr) {
        std::cout << "Nombre: " << actual->nombre
                  << ", Codigo: " << actual->codigo
                  << ", Nota: " << actual->nota << std::endl;
        actual = actual->siguiente; // Mueve al siguiente estudiante
    }
}

void liberarMemoria(Estudiante* pac) {
    while (pac != nullptr) {
        Estudiante* temp = pac;
        pac = pac->siguiente; // Guarda el siguiente antes de borrar
        delete temp; // Libera la memoria del estudiante actual
    }
}

int main() {
    Estudiante* listaEstudiante = nullptr; // Inicializa la lista

    // Inserta estudiantes en la lista
    insertarEstudiante(listaEstudiante, crearEstudiante("Cristian Lopez", 100, 90));
    insertarEstudiante(listaEstudiante, crearEstudiante("Cruz Riasco", 102, 97.5));
    insertarEstudiante(listaEstudiante, crearEstudiante("Hector Palacios", 105, 89.3));

    std::cout << "Lista de estudiantes ordenada por nota:" << std::endl;
    ordenarPorNota(listaEstudiante); // Ordena por nota
    imprimirLista(listaEstudiante); // Imprime la lista de estudiantes

    liberarMemoria(listaEstudiante); // Libera la memoria al final
    return 0;
}
